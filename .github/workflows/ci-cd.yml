name: build push and deploy image

on:
#   workflow_dispatch:

  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
      id-token: write
      contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{secrets.AWS_ACTIONS_ROLE}}
  AWS_ACCESS: ${{secrets.AWS_ACCESS}}
  AWS_SECRET: ${{secrets.AWS_SECRET}}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{github.run_number}}
  ECS_CLUSTER: demo-ecs-cluster
  ECS_SERVICE: demo-ecs-service

jobs:

  build_stage:
    runs-on: ubuntu-latest # github-runner
    
    steps:
      - name: checkout - clone repo
        uses: actions/checkout@v3

      - name: AWS creds configuration
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: build, tag and push image
        id: build-and-push
        run: |
          docker build -t ${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}} .
      
#      - name: Scan Docker image with Trivy
#        uses: aquasecurity/trivy-action@master
#        with:
#          image-ref: ${{ steps.build-and-push.outputs.image }} # or specify the image tag directly
#          format: "table"
#          exit-code: "0" 
#          output: "trivy-image-results.json"  
#          severity: "HIGH,CRITICAL"

      - name: push image to ECR
        run: |
          docker push ${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}

      - name: store image in github env
        run: echo "Image=${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}" >> $GITHUB_ENV


  deploy:
    runs-on: ubuntu-latest
    needs: build_stage
    steps:
      - name: Render new ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: demo-ecs-task-revision2.json   # or .taskdef.json file
          container-name: demo-app
          image: ${{ steps.build-and-push.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        #needs: task-def
        with:
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          #task-definition: ecs-task-def.json  # must exist in repo or generated dynamically
          task-definition: demo-ecs-task-revision2.json
          wait-for-service-stability: true

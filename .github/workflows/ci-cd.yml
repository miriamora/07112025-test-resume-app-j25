name: build push and deploy image

on:
#   workflow_dispatch:

  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
      id-token: write
      contents: read
      #pull_request: write

env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{secrets.AWS_ACTIONS_ROLE}}
  AWS_ACCESS: ${{secrets.AWS_ACCESS}}
  AWS_SECRET: ${{secrets.AWS_SECRET}}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{github.run_number}}
  ECS_CLUSTER: demo-ecs-cluster
  ECS_SERVICE: demo-ecs-service
  TASK_DEFINITION: demo-ecs-task
  CONTAINER_NAME: demo-app

jobs:

  build_stage:
    runs-on: ubuntu-latest # github-runner
    
    steps:
      - name: checkout - clone repo
        uses: actions/checkout@v3

      - name: AWS creds configuration
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: build, tag and push image
        id: build-and-push
        run: |
          docker build -t ${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}} .
      
#      - name: Scan Docker image with Trivy
#        uses: aquasecurity/trivy-action@master
#        with:
#          image-ref: ${{ steps.build-and-push.outputs.image }} # or specify the image tag directly
#          format: "table"
#          exit-code: "0" 
#          output: "trivy-image-results.json"  
#          severity: "HIGH,CRITICAL"

      - name: push image to ECR
        run: |
          docker push ${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}

      - name: store image in github env
        run: echo "Image=${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}" >> $GITHUB_ENV


  Deploy:
    runs-on: ubuntu-latest
    needs: build_stage  # Depends on Build job
    steps:
      - name: AWS Creds Config 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query taskDefinition > task-definition.json
      
      - name: Update task definition with new ECR image
        run: |
          jq --arg IMAGE_URI "${{ needs.Build.outputs.image-uri }}" '.containerDefinitions[0].image = $IMAGE_URI | 
          del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .deregisteredAt)' task-definition.json > register-task-definition.json
      
      - name: Register new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://register-task-definition.json
          echo "NEW_TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query 'taskDefinition.taskDefinitionArn' --output text)" >> $GITHUB_ENV
      
      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition ${{ env.NEW_TASK_DEFINITION }} --force-new-deployment